# -*- coding: utf-8 -*-
"""Pruebas de bondad.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wNoSPk0aI7TozUvS0HhgPkPXIUrQ_eSg
"""

import math;
import numpy as np; 
import random as rd;
import pandas as pd;
import scipy.stats as st;

"""# **Prueba Ji-Cuadrado**

Definición de parámetros
"""

n = 1024;
m = math.sqrt(n);
long_int = 1/m;
datos = np.zeros(n);

for i in range(n):
  datos[i] = rd.random();

"""Determinación de intervalos"""

j = 0; 
intervalos = np.zeros(int(m+1));
for i in range(int(m+1)):
  if i < 1:
    intervalos[i] = 0;
  else:
    intervalos[i] = j + long_int;
    j = j + long_int;

agrupacion = pd.cut(datos, bins = intervalos);
freq_o = agrupacion.value_counts();
estadistico = sum(pow(agrupacion.value_counts()-m,2)/m);

"""Prueba Chi Cuadrado"""

valorp_chi2 = 1-st.chi2.cdf(estadistico,m-1);
valorp_chi2

"""# **Prueba Kolmogorov**"""

nk = 1000;
datosk = np.zeros(nk);

"""Generación números aleatorios"""

for i in range(nk):
  datosk[i] = rd.random();

datos_ordenados = np.sort(datosk);
i_vector = np.zeros(nk);
for i in range(nk):
  i_vector[i] = i + 1;

"""Cálculo de:

$$ \frac{i}{n} ~~;~~\frac{i}{n}-F(x_{i})~~;~~F(x_{i})-\frac{i-1}{n}$$ 


"""

in_vector = i_vector/nk;
a_vector = in_vector-datos_ordenados;
b_vector = datos_ordenados - (i_vector-1)/nk;

x = np.mean(datos_ordenados);
s = np.std(datos_ordenados);
print("Media: ",x,"    Desv. Est: ", s);

"""Hallar máximos y mínimos para parámetros: $$D^{+}~~y~~D^{-} $$"""

dplus = np.max(a_vector);
dminus = np.abs(np.min(b_vector));

d_n = max(dplus,dminus);
d_n

"""Contraste de hipótesis"""

alpha = 0.05;
calpha = 1.36/math.sqrt(nk);

if calpha < d_n: 
  print("Se rechaza la hipótesis nula y por ende se concluye que",
        "los números no siguen una dist. uniforme");
else:
  print("No se rechaza la hipótesis nula y se comprueba que efectivamente",
        "los números siguen la dist. uniforme");